name: Build and Deploy

run-name: ${{ github.repository }} is building and deploying

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  IMAGE_NAME: ${{ secrets.ALIYUN_ACR_REGISTRY }}/taklip-container/yoda
  IMAGE_TAG_LATEST: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Build project
        run: ./gradlew clean build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ALIYUN_ACR_REGISTRY }}
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}

      - name: Build and push Docker image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Deploy to AliCloud ECS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ALIYUN_ECS_HOST }}
          username: ${{ secrets.ALIYUN_ECS_USER }}
          key: ${{ secrets.ALIYUN_ECS_SSH_KEY }}
          script: |
            echo "üîê Logging into ACR..."
            docker login -u ${{ secrets.ALIYUN_ACR_USERNAME }} -p ${{ secrets.ALIYUN_ACR_PASSWORD }} ${{ secrets.ALIYUN_ACR_REGISTRY }}

            # Update deployment script
            cd ~/deploy
            echo "Pulling latest image..."
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}

            # Stop existing container
            echo "üõë Stopping existing container..."
            docker stop yoda-app || true
            docker rm yoda-app || true

            # Start new container
            echo "üöÄ Starting new container..."
            docker run -d \
              --name yoda-app \
              --restart unless-stopped \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
            
            echo "‚úÖ Deployment completed!"

            # Health check
            sleep 30
            if curl -f http://localhost:8080/actuator/health; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Deployment failed!"
              exit 1
            fi

